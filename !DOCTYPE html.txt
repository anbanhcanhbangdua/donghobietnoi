<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>ƒê·ªìng h·ªì th√¥ng minh n√≥i chuy·ªán</title>
  <style>
    body {
      font-family: "Segoe UI", sans-serif;
      text-align: center;
      background: linear-gradient(135deg, #e0f7ff, #f7faff);
      color: #333;
      margin-top: 60px;
    }

    h1 {
      color: #0078ff;
    }

    #status {
      margin-top: 10px;
      font-style: italic;
      color: #666;
    }

    #output {
      margin-top: 20px;
      font-size: 1.3em;
      background: #fff;
      display: inline-block;
      padding: 10px 20px;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      min-width: 260px;
    }

    #startBtn {
      margin-top: 30px;
      padding: 10px 25px;
      border: none;
      border-radius: 10px;
      background: #0078ff;
      color: white;
      font-size: 1.1em;
      cursor: pointer;
      transition: all 0.2s;
    }

    #startBtn:hover {
      background: #005fcc;
      transform: scale(1.05);
    }

    /* Hi·ªáu ·ª©ng s√≥ng √¢m */
    .wave-container {
      display: flex;
      justify-content: center;
      align-items: flex-end;
      height: 50px;
      margin-top: 20px;
    }

    .bar {
      width: 6px;
      background: #0078ff;
      margin: 0 2px;
      border-radius: 4px;
      animation: none;
    }

    @keyframes wave {
      0% { height: 10px; }
      50% { height: 40px; }
      100% { height: 10px; }
    }
  </style>
</head>
<body>

  <h1>üïí ƒê·ªìng h·ªì th√¥ng minh bi·∫øt n√≥i</h1>
  <p id="status">Nh·∫•n "B·∫Øt ƒë·∫ßu" ƒë·ªÉ n√≥i chuy·ªán nh√©!</p>
  <button id="startBtn">B·∫Øt ƒë·∫ßu</button>
  <div id="output"></div>

  <div class="wave-container" id="wave">
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
  </div>

  <audio id="beep" src="https://actions.google.com/sounds/v1/alarms/beep_short.ogg" preload="auto"></audio>

  <script>
    let recognition;
    let retryTimeout;
    let wakeWordHeard = false;
    let listening = false;

    const beepSound = document.getElementById("beep");
    const waveBars = document.querySelectorAll(".bar");

    function speak(text) {
      const synth = window.speechSynthesis;
      const utter = new SpeechSynthesisUtterance(text);
      utter.lang = "vi-VN";
      synth.speak(utter);
    }

    function startWave() {
      waveBars.forEach((bar, i) => {
        bar.style.animation = `wave 1s ease-in-out ${i * 0.1}s infinite`;
      });
    }

    function stopWave() {
      waveBars.forEach(bar => {
        bar.style.animation = "none";
        bar.style.height = "10px";
      });
    }

    function startRecognition() {
      if (!('webkitSpeechRecognition' in window)) {
        alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i!");
        return;
      }

      recognition = new webkitSpeechRecognition();
      recognition.lang = "vi-VN";
      recognition.continuous = true;
      recognition.interimResults = false;

      recognition.onerror = (event) => {
        console.error("L·ªói nh·∫≠n di·ªán:", event.error);
        if (["no-speech", "network", "not-allowed"].includes(event.error)) {
          retryRecognition();
        }
      };

      recognition.onend = () => {
        listening = false;
        document.getElementById('status').innerText = "ƒê√£ ng·ª´ng nghe, t·ª± kh·ªüi ƒë·ªông l·∫°i...";
        stopWave();
        retryRecognition();
      };

      recognition.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map(result => result[0].transcript)
          .join(' ')
          .trim()
          .toLowerCase();

        console.log("Nghe ƒë∆∞·ª£c:", transcript);
        document.getElementById('output').innerText = transcript;

        if (!wakeWordHeard && transcript.includes("hey ƒë·ªìng h·ªì")) {
          wakeWordHeard = true;
          speak("D·∫°, b√© mu·ªën h·ªèi g√¨ n√®?");
        } else if (wakeWordHeard) {
          handleQuestion(transcript);
          wakeWordHeard = false;
        }
      };

      beepSound.play();
      recognition.start();
      listening = true;
      document.getElementById('status').innerText = "üé§ ƒêang l·∫Øng nghe...";
      startWave();
    }

    function retryRecognition() {
      if (retryTimeout) clearTimeout(retryTimeout);
      retryTimeout = setTimeout(() => {
        console.log("Kh·ªüi ƒë·ªông l·∫°i nh·∫≠n di·ªán...");
        startRecognition();
      }, 2000);
    }

    function handleQuestion(text) {
      let reply = "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u n√†y.";

      if (text.includes("th·ªùi ti·∫øt"))
        reply = "H√¥m nay tr·ªùi ƒë·∫πp l·∫Øm, b√© nh·ªõ ƒë·ªôi m≈© nh√©!";
      else if (text.includes("t√™n"))
        reply = "M√¨nh l√† ƒë·ªìng h·ªì th√¥ng minh, b·∫°n th√¢n c·ªßa b√©!";
      else if (text.includes("m·∫•y gi·ªù")) {
        const now = new Date();
        reply = `B√¢y gi·ªù l√† ${now.getHours()} gi·ªù ${now.getMinutes()} ph√∫t.`;
      } else if (text.includes("m·ªát"))
        reply = "V·∫≠y b√© ngh·ªâ ng∆°i ch√∫t nha, u·ªëng n∆∞·ªõc n·ªØa n√®!";
      else if (text.includes("ch∆°i"))
        reply = "B√© nh·ªõ ch∆°i vui m√† an to√†n nha!";

      document.getElementById('output').innerText = reply;
      speak(reply);
    }

    document.getElementById('startBtn').addEventListener('click', () => {
      document.getElementById('status').innerText = "ƒêang xin quy·ªÅn micro...";
      startRecognition();
    });
  </script>
</body>
</html>
